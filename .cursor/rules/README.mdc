---
description:
globs:
alwaysApply: false
---
# 📋 Cursor Rules 使用指南

## 规则文件概览

本项目包含以下 Cursor Rules，帮助 AI 更好地理解和协助开发：

### 🐾 [project-overview.mdc](mdc:project-overview.mdc)
**项目概览规则** - 提供项目基本信息、技术栈、关键文件说明
- 项目特性和技术架构
- 关键文件路径和职责
- 已修复的重要问题
- 性能优化要点

### 🛠️ [code-standards.mdc](mdc:code-standards.mdc) 
**代码规范规则** - 定义代码编写标准和最佳实践
- Flutter/Dart 命名规范
- Widget 设计原则
- 状态管理规范
- 异步编程模式
- 性能优化技巧
- 错误处理标准
- 测试规范

### 🏗️ [architecture-patterns.mdc](mdc:architecture-patterns.mdc)
**架构模式规则** - 说明项目架构设计和设计模式应用
- MVVM + Provider 架构
- 设计模式应用（观察者、对象池、策略等）
- 组件设计原则（SOLID）
- 状态管理流程
- 错误处理架构
- 性能优化架构
- 测试架构

### 🔧 [debugging-troubleshooting.mdc](mdc:debugging-troubleshooting.mdc)
**调试故障排除规则** - 提供问题诊断和解决方案
- 常见问题和解决方案
- 调试工具和技巧
- 错误处理模式
- 性能监控
- 发布前检查清单

## 如何使用这些规则

### 1. 自动应用
这些规则会自动提供给 AI，无需手动引用。AI 会根据上下文选择合适的规则来：
- 理解项目结构和架构
- 提供符合项目规范的代码建议
- 帮助调试和解决问题
- 确保代码质量和性能

### 2. 文件引用格式
规则中使用 `[filename.ext](mdc:filename.ext)` 格式引用项目文件：
```markdown
参考 [lib/main.dart](mdc:lib/main.dart) 中的实现
查看 [lib/providers/game_provider.dart](mdc:lib/providers/game_provider.dart) 的状态管理
```

### 3. 规则覆盖范围
- **代码编写**: 遵循命名规范、设计模式
- **架构决策**: 基于 MVVM + Provider 模式
- **性能优化**: 内存管理、动画优化、渲染优化
- **错误处理**: 分层错误处理、异常恢复
- **测试策略**: 单元测试、Widget测试、集成测试
- **调试方法**: 问题诊断、性能分析

## 规则维护

### 更新规则
当项目架构或规范发生变化时，需要相应更新规则文件：
1. 修改对应的 `.mdc` 文件
2. 确保文件引用路径正确
3. 保持规则之间的一致性

### 添加新规则
创建新规则文件时：
1. 使用 `.mdc` 扩展名
2. 放置在 `.cursor/rules/` 目录下
3. 使用 `[filename.ext](mdc:filename.ext)` 格式引用文件
4. 保持规则简洁、具体、可操作

### 规则验证
定期检查规则是否：
- 与当前代码库一致
- 包含最新的最佳实践
- 覆盖常见开发场景
- 提供清晰的指导

## 项目特定规则要点

### 🎮 游戏开发相关
- 使用对象池模式管理频繁创建的对象
- 实现异步操作锁防止竞态条件
- 控制递归深度避免栈溢出
- 及时释放动画控制器资源

### 📱 Flutter 开发规范
- 优先使用 const 构造函数
- 使用 RepaintBoundary 优化渲染
- 通过 Selector 精确监听状态变化
- 实现边界检查和错误恢复

### 🎨 UI/UX 最佳实践
- 响应式设计适配多种屏幕
- 流畅的动画和过渡效果
- 用户友好的错误信息提示
- 符合平台规范的交互模式

### ⚡ 性能优化重点
- 内存泄漏预防和检测
- 动画性能优化（60fps）
- Widget 重建最小化
- 资源生命周期管理

这些规则将持续指导项目开发，确保代码质量、性能和可维护性。
